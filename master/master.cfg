# -*- python -*-
# ex: set syntax=python:
"""
This is a sample buildmaster config file. It must be installed as
'master.cfg' in your buildmaster's base directory.
"""

from fnmatch import fnmatch
import os
import yaml

from twisted.python import log
from buildbot.plugins import *
from environconfig import EnvironConfig
from environconfig import StringVar, IntVar, BooleanVar, CustomVar, MethodVar

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}


####### ENVIRONMENT

@CustomVar.new
def ImagePatternVar(patternstr):
    patterns = patternstr.split(',')
    return (lambda name: any(fnmatch(name, p) for p in patterns))


class Config(EnvironConfig):
    DOCKER_HOST = StringVar(default="unix://var/run/docker.sock")
    WORKER_IMAGE_AUTOPULL = BooleanVar(default=True)
    WORKER_INSTANCES = IntVar(default=16)

    # Comma separated list of allowed image shell-like patterns. By default '*'
    WORKER_IMAGE_WHITELIST = ImagePatternVar(default=lambda name: True)

    @MethodVar
    def WASHER_FORCE_GATEWAY(env):
        if (env.DOCKER_HOST.startswith('unix://')
            or "localhost" in env.DOCKER_HOST):
            return "1"
        else:
            return "0"

    BUILDBOT_MQ_URL = StringVar(default=None)
    BUILDBOT_MQ_REALM = StringVar(default="buildbot")
    BUILDBOT_MQ_DEBUG = BooleanVar(default=False)

    BUILDBOT_WORKER_PORT = IntVar(default=9989)

    BUILDBOT_WEB_URL = StringVar(default="http://localhost:8010/")
    BUILDBOT_WEB_PORT = IntVar(default=8010)
    BUILDBOT_WEB_HOST = StringVar(default="localhost")

    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    BUILDBOT_DB_URL = StringVar(default="sqlite://")



####### WORKERS

docker_workers = ["docker-%d" % i for i in range(Config.WORKER_INSTANCES)]

c['workers'] = []
c['workers'] += [worker.WasherDockerLatentWorker(
                     name,
                     None,
                     docker_host=Config.DOCKER_HOST,
                     environment={"WASHER_FORCE_GATEWAY": Config.WASHER_FORCE_GATEWAY},
                     image=util.Property("task_image", default="gitsec-worker"),
                     autopull=Config.WORKER_IMAGE_AUTOPULL,
                     followStartupLogs=True)
                 for name in docker_workers]

if Config.BUILDBOT_MQ_URL is not None:
    c['mq'] = {
        'type': 'wamp',
        'router_url': Config.BUILDBOT_MQ_URL,
        'realm': Config.BUILDBOT_MQ_REALM,
        'debug': Config.BUILDBOT_MQ_DEBUG,
        'debug_websockets': Config.BUILDBOT_MQ_DEBUG,
        'debug_lowlevel': Config.BUILDBOT_MQ_DEBUG}

c['protocols'] = {'pb': {'port': Config.BUILDBOT_WORKER_PORT}}


####### CHANGESOURCES

c['change_source'] = []


####### SCHEDULERS

c['schedulers'] = [
    schedulers.AnyBranchScheduler(
        name="launch",
        treeStableTimer=1,
        builderNames=["launch"]),
#        properties={"virtual_builder_name": util.Property("project")}),
    schedulers.Triggerable(
        name="bootstrap",
        builderNames=["bootstrap"]),
    schedulers.Triggerable(
        name="analyze",
        builderNames=["analyze"])
]


####### BUILDERS

def process_yml_cfg(step):
    config = yaml.load(step.config)
    # with open("testcfg.yml") as f:
    #     config = yaml.load(f.read())

    for plugin, config in config["plugins"].items():

        task_image, *task_name = plugin.split("#", 1)

        allowed_image = Config.WORKER_IMAGE_WHITELIST(task_image)
        if not allowed_image:
            log.err("Worker image %r is not allowed" % task_image)
            continue

        if not task_name:
            task_name = "main"
        else:
            task_name = task_name[0]

        for sched in step.schedulerNames:
            yield {"sched_name": sched,
                   "props_to_set": {
                       "task_image": task_image,
                       "task_name": task_name,
                       "task_args": config,
                       "virtual_builder_name": step.getProperty("project") + "@" + task_image},
                   "unimportant": False}

launch_factory = util.BuildFactory()
launch_factory.addStep(
    steps.Trigger(schedulerNames=["bootstrap"],
                  set_properties={"virtual_builder_name": util.Property("project")}))

bootstrap_factory = util.BuildFactory()
bootstrap_factory.addStep(steps.Git(repourl=util.Property("repository")))
bootstrap_factory.addStep(
    steps.TriggerFromFile(
        waitForFinish=True,
        configfile=".gitsec.yml",
        processor=process_yml_cfg,
        schedulerNames=["analyze"]))

analyze_factory = util.BuildFactory()
analyze_factory.addStep(steps.Git(repourl=util.Property("repository")))
analyze_factory.addStep(
    steps.WasherTask(
        task_name=util.Property("task_name"),
        task_args=util.Property("task_args")))


c['builders'] = []
c['builders'].append(
    util.BuilderConfig(
        name="launch",
        workernames=docker_workers,
        factory=launch_factory))

c['builders'].append(
    util.BuilderConfig(
        name="bootstrap",
        workernames=docker_workers,
        factory=bootstrap_factory))
c['builders'].append(
    util.BuilderConfig(
        name="analyze",
        workernames=docker_workers,
        factory=analyze_factory))


####### PROJECT IDENTITY

c['title'] = "GitSec"
c['titleURL'] = "https://github.com/BBVA/gitsec"
c['buildbotURL'] = Config.BUILDBOT_WEB_URL
c['www'] = dict(port=Config.BUILDBOT_WEB_PORT,
                plugins=dict(),
                change_hook_dialects={'github': {}},
                custom_templates_dir="templates")


####### DB URL
c['db'] = {'db_url' : Config.BUILDBOT_DB_URL}
